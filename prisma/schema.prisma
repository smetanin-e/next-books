//генерируем схему, которую мы будем применять для javaScript
generator client {
    provider = "prisma-client-js"
}

//объясняем призме с какой бд необходимо работать
datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URL")
}

//описываем таблицы
model User {
    id Int @id @default(autoincrement())

    fullName String
    email    String @unique
    password String

    cart   Cart?
    cartId Int?

    createAt DateTime @default(now())
    updateAt DateTime @updatedAt
}

model Category {
    id   Int    @id @default(autoincrement())
    name String @unique

    subcategories SubCategory[]

    books Book[]
}

model SubCategory {
    id   Int    @id @default(autoincrement())
    name String @unique

    categoryId Int
    category   Category @relation(fields: [categoryId], references: [id])

    books Book[]
}

model Tag {
    id   Int    @id @default(autoincrement())
    name String @unique

    books Book[]
}

model Book {
    id          Int    @id @default(autoincrement())
    title       String
    description String
    author      String
    price       Int
    rating      Float

    tags Tag[]

    subcategoryId Int
    subcategory   SubCategory @relation(fields: [subcategoryId], references: [id])

    categoryId Int
    category   Category @relation(fields: [categoryId], references: [id])

    cartItem CartItem[]
}

model Cart {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique

    token String

    totalAmount Int @default(0)

    CartItem CartItem[]

    createAt DateTime @default(now())
    updateAt DateTime @updatedAt
}

model CartItem {
    id Int @id @default(autoincrement())

    cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    bookId Int?
    book   Book? @relation(fields: [bookId], references: [id])

    quantity Int

    createAt DateTime @default(now())
    updateAt DateTime @updatedAt
}
